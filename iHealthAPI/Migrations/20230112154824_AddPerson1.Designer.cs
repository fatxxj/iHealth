// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iHealthAPI.Data;

#nullable disable

namespace iHealthAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230112154824_AddPerson1")]
    partial class AddPerson1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClinicWorker", b =>
                {
                    b.Property<int>("ClinicsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkersId")
                        .HasColumnType("int");

                    b.HasKey("ClinicsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("ClinicWorker");
                });

            modelBuilder.Entity("iHealthAPI.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClinicType")
                        .HasColumnType("int");

                    b.Property<string>("ClinicTypeString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Clinic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicType = 1,
                            ClinicTypeString = "GeneralPurposeClinic",
                            Email = "halimifat@gmail.com",
                            Image = "DemoClinic.png",
                            Name = "First Demo Clinic",
                            PatientId = 1,
                            PhoneNumber = "070224560",
                            PlaceId = 1,
                            RegistrationNo = "0012343",
                            UserId = 1,
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("iHealthAPI.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faksimil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "halimifat@gmail.com",
                            Faksimil = "0012343",
                            Gender = "Male",
                            Image = "DemoClinic.png",
                            Name = "Doctor Fat Halimi",
                            PhoneNumber = "070224560",
                            Surname = "Doctor Halimi",
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("iHealthAPI.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciallity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("Nurse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2020, 1, 1, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            Name = "DemoNurse",
                            Speciallity = "Orthodont",
                            Surname = "DemoNurseSurname",
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("iHealthAPI.Models.OtherStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("OtherStaff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2020, 1, 1, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            Name = "OtherStaffName",
                            Surname = "OtherStaffSurname",
                            WorkerId = 1,
                            WorkingDescription = "Hygienist"
                        });
                });

            modelBuilder.Entity("iHealthAPI.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("EMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClinicId = 1,
                            EMBG = "0012343",
                            Email = "halimifat@gmail.com",
                            Gender = "Male",
                            Image = "DemoClinic.png",
                            IsDeleted = false,
                            Name = "Patient Fat",
                            PhoneNumber = "070224560",
                            PlaceId = 1,
                            Surname = "Patient Halimi",
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("iHealthAPI.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapsLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Place");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Demo Address",
                            CityName = "Demo City",
                            ClinicId = 1,
                            CountyName = "Demo Country",
                            Latitude = "12.200",
                            Longitude = "12.200",
                            MapsLink = "https://www.google.com/maps",
                            PatientId = 1,
                            Region = "Demo Region",
                            UserId = 1,
                            WorkerId = 1,
                            ZipCode = "Demo ZipCode"
                        });
                });

            modelBuilder.Entity("iHealthAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            Email = "halimifat@gmail.com",
                            Name = "Fat Main User",
                            Password = "तྛ䔵㨴╉⚻ছ㺎睲બꊽ矎퉚閾",
                            PlaceId = 1,
                            Surname = "Halimi "
                        });
                });

            modelBuilder.Entity("ihealthapi.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Bonuses")
                        .HasColumnType("real");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<int?>("OtherStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<DateTime?>("WorkingDayAndEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkingDayAndStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Worker");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonuses = 300f,
                            ClinicId = 1,
                            DoctorId = 1,
                            IsDeleted = false,
                            IsEmployee = true,
                            NurseId = 1,
                            OtherStaffId = 1,
                            PatientId = 1,
                            Salary = 32000f,
                            WorkingDayAndEndTime = new DateTime(2020, 1, 1, 13, 10, 0, 0, DateTimeKind.Unspecified),
                            WorkingDayAndStartTime = new DateTime(2020, 1, 1, 12, 10, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PatientWorker", b =>
                {
                    b.Property<int>("PatientsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkersId")
                        .HasColumnType("int");

                    b.HasKey("PatientsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("PatientWorker");
                });

            modelBuilder.Entity("ClinicWorker", b =>
                {
                    b.HasOne("iHealthAPI.Models.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ihealthapi.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("iHealthAPI.Models.Clinic", b =>
                {
                    b.HasOne("iHealthAPI.Models.Place", "Place")
                        .WithMany("Clinics")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iHealthAPI.Models.User", "User")
                        .WithMany("Clinics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iHealthAPI.Models.Doctor", b =>
                {
                    b.HasOne("ihealthapi.Models.Worker", "Worker")
                        .WithMany("Doctors")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("iHealthAPI.Models.Nurse", b =>
                {
                    b.HasOne("ihealthapi.Models.Worker", "Worker")
                        .WithMany("Nurses")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("iHealthAPI.Models.OtherStaff", b =>
                {
                    b.HasOne("ihealthapi.Models.Worker", "Worker")
                        .WithMany("OtherStaff")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("iHealthAPI.Models.Patient", b =>
                {
                    b.HasOne("iHealthAPI.Models.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iHealthAPI.Models.Place", "Place")
                        .WithMany("Patients")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Clinic");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("iHealthAPI.Models.Place", b =>
                {
                    b.HasOne("iHealthAPI.Models.User", "User")
                        .WithOne("Place")
                        .HasForeignKey("iHealthAPI.Models.Place", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ihealthapi.Models.Worker", b =>
                {
                    b.HasOne("iHealthAPI.Models.Place", null)
                        .WithMany("Workers")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PatientWorker", b =>
                {
                    b.HasOne("iHealthAPI.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ihealthapi.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("iHealthAPI.Models.Clinic", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("iHealthAPI.Models.Place", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("Patients");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("iHealthAPI.Models.User", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ihealthapi.Models.Worker", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("OtherStaff");
                });
#pragma warning restore 612, 618
        }
    }
}
